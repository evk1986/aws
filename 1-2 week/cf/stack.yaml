AWSTemplateFormatVersion: "2010-09-09"
Description: "First week practical session"
Resources:
  customRootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ''
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: '*'
                Resource: "*"
                Effect: Allow
          PolicyName: Administrator
  myInstanceProfileRoot:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "customRootRole"
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  subnets:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.20.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  S3:
    Type: AWS::S3::Bucket
    Properties:
      #      AccessControl: PublicReadWrite
      BucketName: awstestbucketname1986222
      VersioningConfiguration:
        Status: Enabled
  launchConfigs:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        rolebased:
          type: S3
          buckets: awstestbucketname1986222
          roleName: !Ref customRootRole
      AWS::CloudFormation::Init:
#        config:
#          files:
#            - test_cfg
#        test_cfg:
#          files:
#            text_txt:
#              source: !Sub
#                - >-
#                  https://awstestbucketname.${AWS::Region}.amazonaws.com/telepresence.log
#                - BucketName: !Ref S3
#                  S3Region: !Sub '${AWS::Region}'
#              authentication: rolebased
              config:
                files:
                  /tmp/test.txt:
                    content: hey world!
                    mode: '000755'
                    owner: root
                    group: root
    Properties:
      LaunchConfigurationName: "dummyLaunch"
      IamInstanceProfile: !Ref myInstanceProfileRoot
#      ImageId: ami-003d8924a33dc0fd7
      ImageId: ami-00045e940b942ea45
#      ImageId: ami-049a9b7435738b591
      InstanceType: t2.nano
      KeyName: custom
      InstanceMonitoring: false
      SecurityGroups:
        - !Ref security
#      UserData:
#        Fn::Base64:
#          !Sub |
#          !/bin/bash -xe
#          echo "[INFO] Executing config-sets";
#          yum update -y aws-cfn-bootstrap;
#          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource launchConfigs --configsets ec2_bootstrap --region ${AWS::Region};
#          /opt/aws/bin/cfn-signal -e -0 --stack  ${AWS::StackName} --resource scaling --region ${AWS::Region}
#          cat /tmp/test.txt;
#          echo "[INFO] Executing config-sets finished";
  scaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: subnets
    Properties:
      VPCZoneIdentifier:
        - !Ref subnets
      AutoScalingGroupName: AWSGroupLohica
      HealthCheckGracePeriod: 300
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref launchConfigs
  security:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: custom_sg
      GroupDescription: Allow ssh
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
Outputs:
  InstanceID:
    Description: autoscaling group
    Value: !Ref scaling